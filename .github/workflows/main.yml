# This workflow sets up and runs MSBuild and VSTest
# to build and test a Visual Studio solution.

name: Build

on: [push, pull_request]

jobs:
  run-msbuild:
    runs-on: windows-latest
    name: Run MSBuild
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        platform: [x86, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.1.0
        id: checkout_code

      - name: Install VS Build Tools 17.0.2
        working-directory: .\
        run: |
          $VSCONFIGPATH = Resolve-Path ".\.github\workflows\configs\.vsconfig" | select -ExpandProperty Path
          curl https://download.visualstudio.microsoft.com/download/pr/a53da67f-8d8a-448c-b211-d234d17e6398/810b12ab293714c34c29654ef5089f11bdc49d180236b0f1927f599cdb01d5f3/vs_BuildTools.exe --output vs_BuildTools.exe
          Start-Process -FilePath .\vs_BuildTools.exe -ArgumentList "--quiet", "--wait", "--norestart", "--config $VSCONFIGPATH" -Wait -PassThru
        # The .vsconfig file is generated by exporting the configuration providded by the Visual Studio Installer
        #
        # Download for build tools sourced from https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-history
        # See MS Docs for CLI switches https://docs.microsoft.com/en-us/visualstudio/install/command-line-parameter-examples?view=vs-2019
        #
        # Keep this updated with whatever the current IT supported version of VS is

      - name: Setup MSBuild and add to PATH
        uses: microsoft/setup-msbuild@v1.0.2
        id: setup_msbuild
        continue-on-error: true
        with:
          vs-version: '[17.0,17.1)'
        # This sometimes fails for unexplained reasons
        #
        # Keep this updated with whatever the current IT supported version of VS is

      - name: Workaround - Fallback MSBuild Setup
        if: steps.setup_msbuild.outcome != 'success'
        run: |
          $installationPath = "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools"
          if ($installationPath -and (test-path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
            & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo && set" | foreach-object {
              echo "$_" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
            }
          }
        # Keep this updated with whatever the current IT supported version of VS is

      - name: Restore Packages
        id: restore_packs
        continue-on-error: true
        working-directory: .\
        run: msbuild -t:restore
        # Note: This approach only works for PackageReference style packages,
        # which is what Sam used to include Raylib 3.5.0

      - name: Workaround - Clean NuGet Package Cache and Retry Restore Packages
        if: steps.restore_packs.outcome != 'success'
        run: |
          dotnet clean '.\AIE Student Samples.sln' --configuration ${{ matrix.configuration }}
          dotnet nuget locals all --clear
          msbuild -t:restore
        # See GitHub Issues: actions/setup-dotnet#155


      - name: Run MSBuild
        id: run_msbuild
        working-directory: .\
        run: msbuild -m ".\Bootstrap.sln" -p:Configuration=${{ matrix.configuration }} -p:Platform=${{ matrix.platform }}
